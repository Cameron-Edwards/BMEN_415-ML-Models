# -*- coding: utf-8 -*-
"""Input Image CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-gpyldoVhFmnnk5Xk_fkFc-qnkYEi3VQ
"""

j!pip install -Uqq fastbook tornado==5.1

import fastbook
fastbook.setup_book()

import numpy as np
import os 
import cv2
import pandas as pd
import matplotlib.pyplot as plt
# "/content/gdrive/MyDrive/CNN Model/chest_xray/train"

def ImportData(Data_Directory, IMG_SIZE):
#Importing the Training Data

  DataDir = Data_Directory
  CATEGORIES = ["NORMAL", "PNEUMONIA"]
  training_data = []

  for category in CATEGORIES:
      path = os.path.join(Data_Directory, category)
      class_num = CATEGORIES.index(category)
      for img in os.listdir(path):
          img_array = cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)
          new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
          training_data.append([new_array, class_num])

  np.random.shuffle(training_data)

  X = []
  Y = []

  for inputs, labels in training_data:
      X.append(inputs)
      Y.append(labels)

  return np.array(X), np.array(Y)

x_train, y_train = ImportData("/content/gdrive/MyDrive/CNN Model/chest_xray/train",200)

# creating a plot
pixel_plot = plt.figure()
  
# plotting a plot
pixel_plot.add_axes()
  
# customizing plot
plt.title("Chest X-rays")
pixel_plot = plt.imshow(x_train[0], cmap='gray')

print(y_train.shape)

def resize(x, y, rows): # changing from a 3D array to a 2D array
  x = x.reshape(rows, 200*200)
  y = y.reshape(rows,1)
  return x, y

"""x_train, y_train = resize(x_train, y_train, 5216)
x_train = pd.DataFrame(x_train)
y_train = pd.DataFrame(y_train)

each column represents a grayscale pixel value. We turned our 3D array where the first index was a 
different image and the last two indexes were the 200X200 grey scale image to a 2D array where
each row is an image and each column is a pixel value.
x_train.head()
"""

x_test, y_test = ImportData("/content/gdrive/MyDrive/CNN Model/chest_xray/test",200)
x_val, y_val = ImportData("/content/gdrive/MyDrive/CNN Model/chest_xray/val",200)

"""x_test, y_test = resize(x_test, y_test, 624)
x_test = pd.DataFrame(x_test)
y_test = pd.DataFrame(y_test)

x_val, y_val = resize(x_val, y_val, 16)
x_val = pd.DataFrame(x_val)
y_val = pd.DataFrame(y_val)

Pre processing done. We now have panda data frames; x and y test, train and validation sets as 2D arrays where each row is a different image and each column is 
an individual grayscale pixel value between 0 and 255
"""

from keras.utils import np_utils

y_train = np_utils.to_categorical(y_train, 2)
y_test = np_utils.to_categorical(y_test, 2)
y_val = np_utils.to_categorical(y_val, 2)

print(y_test)

from tensorflow import keras
from keras import layers
from keras.layers import Activation, Dense
from keras.models import Sequential

x_train, x_test = x_train/255, x_test/255

print(x_train.shape)

input_shape = (200, 200, 1)

# the data, split between train and test sets


# Scale images to the [0, 1] range
x_train = x_train.astype("float32") / 255
x_test = x_test.astype("float32") / 255
# Make sure images have shape (28, 28, 1)
x_train = np.expand_dims(x_train, -1)
x_test = np.expand_dims(x_test, -1)
print("x_train shape:", x_train.shape)
print(x_train.shape[0], "train samples")
print(x_test.shape[0], "test samples")

model = keras.Sequential(
    [
        keras.Input(shape=input_shape),
        layers.Conv2D(32, kernel_size=(3, 3), activation="relu"),
        layers.MaxPooling2D(pool_size=(2, 2)),
        layers.Conv2D(64, kernel_size=(3, 3), activation="relu"),
        layers.MaxPooling2D(pool_size=(2, 2)),
        layers.Flatten(),
        layers.Dropout(0.5),
        layers.Dense(2, activation="softmax"),
    ]
)

model.summary()

batch_size = 128
epochs = 15

model.compile(loss="categorical_crossentropy", optimizer="adam", metrics=["accuracy"])

model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(x_val,y_val))